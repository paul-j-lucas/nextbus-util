#! /usr/bin/env python
##
#   nb-vclosest:    Filter NextBus data for the closest stops only.
#   Version:        1.0
#
#   Author:         Paul J. Lucas
##

from __future__ import print_function

import argparse
import operator
import os
import re
import sys

###############################################################################

# default values
IN_DEFAULT  = sys.stdin
OUT_DEFAULT = sys.stdout

# JSON object keys
K_STAG      = 'stop_tag'
K_VID       = 'vehicle_id'
K_VSPEED    = 'vehicle_speed'
K_VDIST     = 'vehicle_distance'
K_VROUTE    = 'vehicle_route'
K_DATE      = 'date'
K_TIME      = '_time'

########## Functions ##########################################################

def drain( vdict ):
    for d in sorted( vdict.values(), key=operator.itemgetter( K_TIME ) ):
        log_vehicle_at_stop( d, args.out_file )


def log( msg, file=sys.stdout ):
    print( "%s" % msg, file=file )
    file.flush()


def log_vehicle_at_stop( vdict, file=sys.stdout ):
    log(
        '%s vehicle_id=%s vehicle_route=%s vehicle_speed=%s vehicle_distance=%s stop_tag=%s'
        % (vdict[ K_TIME ],
           vdict[ K_VID ],
           vdict[ K_VROUTE ],
           vdict[ K_VSPEED ],
           vdict[ K_VDIST ],
           vdict[ K_STAG ])
    )


def parse( line ):
    """Parses a log entry line."""
    kv_d = dict( re.findall( r'(\S+)=(\S+)', line[24:] ) )
    kv_d[ K_DATE ] = line[0:10]
    kv_d[ K_TIME ] = line[0:23]         # YYYY-MM-DD HH:MM:SS GMT
    return kv_d


########## Process command-line arguments #####################################

parser = argparse.ArgumentParser(
    formatter_class=argparse.RawDescriptionHelpFormatter,
    description="Filter NextBus vehicle/stop data."
)

parser.add_argument(
    "-i", "--in-file", type=argparse.FileType('r'), default=sys.stdin,
    dest="in_file", metavar="<file>",
    help="specify log to read from [default: %s]"
    % (IN_DEFAULT.name if type( IN_DEFAULT ) == file else IN_DEFAULT)
)

parser.add_argument(
    "-o", "--out-file", type=argparse.FileType('w'), default=sys.stdout,
    dest="out_file", metavar="<file>",
    help="specify log to write to [default: %s]"
    % (OUT_DEFAULT.name if type( OUT_DEFAULT ) == file else OUT_DEFAULT)
)

args = parser.parse_args()


########## Main loop ##########################################################

old_date = ''
vdict = { }

for line in args.in_file:
    new_d = parse( line )
    new_date = new_d[ K_DATE ]
    if new_date != old_date:
        drain( vdict )
        vdict.clear()
        old_date = new_date
    vid = new_d[ K_VID ]
    if vid in vdict:
        old_d = vdict[ vid ]
        old_stop = old_d[ K_STAG ]
        new_stop = new_d[ K_STAG ]
        if new_stop == old_stop:
            old_dist = int( old_d[ K_VDIST ] )
            new_dist = int( new_d[ K_VDIST ] )
            if new_dist > old_dist:
                continue
        else:
            log_vehicle_at_stop( old_d, args.out_file )
    vdict[ vid ] = new_d

# No more log entries: print whatever's left in the dictionary.
drain( vdict )

sys.exit( 0 )

###############################################################################
# vim:set et sw=4 ts=4:
